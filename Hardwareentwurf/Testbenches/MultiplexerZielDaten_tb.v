// Code generated by Icestudio 0.10
// Mon, 20 Mar 2023 15:09:35 GMT

// Testbench template
`include "../Prozessor/MultiplexerZielDaten.v"
`default_nettype none
`define DUMPSTR(x) `"x.vcd`"
`timescale 10 ns / 1 ns
`define assert(signal, value) \
        if (signal !== value) begin \
            $display("ASSERTION FAILED in %m: signal != value"); \
            $finish; \
        end

module main_tb
;
 
 // Simulation time: 100ns (10 * 10ns)
localparam HalfCycle = 5;
localparam Cycle = 2*HalfCycle;
 
 // Input/Output
 reg [31:0] ALUErgebnis;
 reg [25:0] AktuellerPC;
 reg [31:0] LoadErgebnis;
 reg JALBefehl;
 reg LoadBefehl;
 wire [31:0] ZielDaten;
 
 // Module instance
 MultiplexerZielDaten multiplexerZielDaten (
  .ALUErgebnis(ALUErgebnis),
  .AktuellerPC(AktuellerPC),
  .LoadErgebnis(LoadErgebnis),
  .JALBefehl(JALBefehl),
  .LoadBefehl(LoadBefehl),
  .ZielDaten(ZielDaten)
 );
 
 initial begin
  $dumpvars(0, main_tb);
 
  // TODO: initialize the registers here
  // e.g. value = 1;
  // e.g. #2 value = 0;
  ALUErgebnis = 32'b00010010000000110000010000001100;
  AktuellerPC = 26'b00011001001100001110010110;
  LoadErgebnis = 32'b00010010000100010000010110001001;
  $display("Start of simulation");
  #(Cycle) JALBefehl = 0; LoadBefehl = 0;
  #(Cycle)   
  `assert(ZielDaten == ALUErgebnis,1);
  #(Cycle) 
  JALBefehl = 0; LoadBefehl = 1;
  #(Cycle) 
  `assert(ZielDaten == LoadErgebnis,1);
  #(Cycle) 
  JALBefehl = 1; LoadBefehl = 0;
  #(Cycle) 
  `assert(ZielDaten == 32'b00000000011001001100001110010110,1);
  #(Cycle) $display("End of simulation");
  $finish;
 end
 
endmodule
