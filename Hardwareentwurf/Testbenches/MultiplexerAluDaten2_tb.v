// Code generated by Icestudio 0.10
// Mon, 20 Mar 2023 15:03:20 GMT

// Testbench template
`include "../Prozessor/MultiplexerAluDaten2.v"
`default_nettype none
`define DUMPSTR(x) `"x.vcd`"
`timescale 10 ns / 1 ns
`define assert(signal, value) \
        if (signal !== value) begin \
            $display("ASSERTION FAILED in %m: signal != value"); \
            $finish; \
        end

module main_tb
;
 
 // Simulation time: 100ns (10 * 10ns)
localparam Halfcycle = 5;
localparam Cycle = 2 * Halfcycle;
 
 // Input/Output
 reg [25:0] AktuellerPC;
 reg [31:0] QuellDaten1;
 reg RelativerSprungBefehl;
 wire [31:0] Daten1;
 
 // Module instance
 MultiplexerAluDaten2 multiplexerAluDaten2 (
  .AktuellerPC(AktuellerPC),
  .QuellDaten1(QuellDaten1),
  .RelativerSprungBefehl(RelativerSprungBefehl),
  .Daten1(Daten1)
 );
 
 initial begin
  // File were to store the simulation results
  $dumpvars(0, main_tb);
 
  // TODO: initialize the registers here
  // e.g. value = 1;
  // e.g. #2 value = 0;
  AktuellerPC = 26'b00011001001100001110010110;
  QuellDaten1 = 32'b00010010000000110000010000001100;
  $display("Start of simulation");
  #(Cycle)
  RelativerSprungBefehl = 0;
  #(Cycle) 
  `assert(Daten1 == QuellDaten1,1);

  #(Cycle) 
  RelativerSprungBefehl = 1;
  #(Cycle) 
  `assert(Daten1 == 32'b00000000011001001100001110010110,1);

  #(Cycle) $display("End of simulation");
  $finish;
 end
 
endmodule
