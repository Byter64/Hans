// Code generated by Icestudio 0.10
// Sat, 18 Mar 2023 19:02:29 GMT

// Testbench template
`include "../Prozessor/Programmzahler.v"
`default_nettype none
`define DUMPSTR(x) `"x.vcd`"
`timescale 10 ns / 1 ns
`define assert(signal, value) \
        if (signal !== value) begin \
            $display("ASSERTION FAILED in %m: signal != value"); \
            $finish; \
        end

module main_tb
;
 
 // Simulation time: 
 localparam Halfcycle = 5;
 localparam Cycle = 2*Halfcycle;
 
 // Input/Output
 reg Schreibsignal;
 reg [25:0] NeuerPC_;
 reg clock;
 reg reset;
 wire [25:0] AktuellerPC_;
 wire [25:0] ErhoehterPC_;
 
 // Module instance
 Programmzahler programmzahler (
  .SchreibSignal(Schreibsignal),
  .NeuerPC(NeuerPC_),
  .TaktSignal(clock),
  .AktuellerPC(AktuellerPC_),
  .Reset(reset)
 );
 
 always #(Halfcycle) clock = ~clock;

 initial begin
  $dumpvars(0, main_tb);
 
  // TODO: initialize the registers here
  // e.g. value = 1;
  // e.g. #2 value = 0;
  Schreibsignal = 1'b0; NeuerPC_ = 26'b0;
  clock = 1'b0;
  $display("Start of simulation");
  #(Cycle)
  Schreibsignal = 1'b1; NeuerPC_ = 26'b01110;
  #(Cycle)
  assertSignal(AktuellerPC_, 26'b01110);
  #(Cycle)
  Schreibsignal = 1'b0; NeuerPC_ = 26'b01000100000111;
  #(Cycle)
  assertSignal(AktuellerPC_, 26'b01111);
  #(Cycle)
  Schreibsignal = 1'b1; NeuerPC_ = 26'b11111111111111111111111110;
  #(Cycle)
  assertSignal(AktuellerPC_, 26'b11111111111111111111111110);

  #(Cycle) $display("End of simulation");
  $finish;
 end
 
 task assertSignal;
  input  [25:0]assertaktuellerPC;
  input  [25:0]shouldaktuellerPC;
  begin
    if(assertaktuellerPC != shouldaktuellerPC) begin 
      $display("AktuellerPC = %b, should be %b!",assertaktuellerPC,shouldaktuellerPC);
    end
  end
 endtask


endmodule
