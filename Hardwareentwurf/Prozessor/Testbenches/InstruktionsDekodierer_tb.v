// Code generated by Icestudio 0.10
// Sat, 18 Mar 2023 19:01:17 GMT

// Testbench template
`include "../Prozessor/Instruktionsdekodierer.v"
`default_nettype none
`define DUMPSTR(x) `"x.vcd`"
`timescale 10 ns / 1 ns
`define assert(signal, value) \
        if (signal !== value) begin \
            $display("ASSERTION FAILED in %m: signal != value"); \
            $finish; \
        end
module main_tb
;
 
 // Simulation time: 100ns (10 * 10ns)
 parameter DURATION = 10;
 
// Input/Output
 reg [31:0] Instruktion;
 reg DekodierSignal;
 reg Reset;
 reg Clock;

 wire [5:0] QuellReg1;
 wire [5:0] QuellReg2;
 wire [5:0] ZielReg1;
 wire [31:0] IDaten;
 wire ImmediateAktiv;
 wire [5:0] FunktionsCode;
 wire JALBefehl;
 wire RelativerSprung;
 wire LoadBefehl;
 wire StoreBefehl;
 wire UnbedingterSprungBefehl;
 wire BedingterSprung;
 wire AbsoluterSprung;
 wire Sprungbedingung;

localparam[4:0] q1  = 5'b00001;
localparam[4:0] q2  = 5'b00010;
localparam[4:0] q3  = 5'b00011;
localparam[4:0] q4  = 5'b00100;
localparam[5:0] iq1  = 6'b000001;
localparam[5:0] iq2  = 6'b000010;
localparam[5:0] iq3  = 6'b000011;
localparam[5:0] iq4  = 6'b000100;
localparam[5:0] sq1  = 6'b100001;
localparam[5:0] sq2  = 6'b100010;
localparam[5:0] sq3  = 6'b100011;
localparam[5:0] sq4  = 6'b100100;

localparam[5:0] rformat = 6'b0;
localparam iformat = 1'b1;
localparam[5:0] jformat = 6'b010000;

localparam[5:0] ADDFunktion  = 6'b0;
localparam[5:0] MULFunktion  = 6'b000010;
localparam[5:0] CGEFunktion = 6'b001011;
localparam[5:0] MULSFunktion = 6'b100010;
localparam[5:0] CLSFunktion = 6'b101011;

localparam[4:0] MULIFunktion  = 5'b00010;
localparam[4:0] SLLIFunktion = 5'b10110;

localparam[5:0] LoadCode   = 6'b111000;
localparam[5:0] LoadSCode  = 6'b111001;
localparam[5:0] StoreCode  = 6'b111010;
localparam[5:0] StoreSCode = 6'b111011;
localparam[5:0] JregCode   = 6'b111100;
localparam[5:0] BezCode    = 6'b111101;
localparam[5:0] BNezCode   = 6'b111110;
localparam[5:0] JALCode    = 6'b111111;
localparam[5:0] JmpCode    = 6'b010000;
localparam[5:0] AddisCode  = 6'b110000;


localparam[15:0] Immediate10 = 16'b0000000000001010;
localparam[15:0] Immediate30 = 16'b1111111111111111;
localparam[31:0] Immediate10Shifted = 32'b00000000000010100000000000000000;
localparam[15:0] Immediate20 = 16'b0000000000010100;
localparam[25:0] ImmediateGross10 = 26'b00000000000000000000001010;
localparam[25:0] ImmediateGross20 = 26'b00000000000000000000010100;


//Instruktion
reg[31:0] ADD =     {rformat,q2,q3,q1,5'b0,ADDFunktion}; 
reg[31:0] MUL =     {rformat,q1,q2,q3,5'b0,MULFunktion}; 
reg[31:0] CGE =     {rformat,q3,q2,q1,5'b0,CGEFunktion}; 
reg[31:0] MULS =    {rformat,q1,q4,q2,5'b0,MULSFunktion}; 
reg[31:0] CGES =    {rformat,q2,q1,q2,5'b0,CLSFunktion}; 
reg[31:0] MULI =    {iformat,MULIFunktion,q3,q1,Immediate20}; 
reg[31:0] SLLI =    {iformat,SLLIFunktion,q2,q4,Immediate30}; 
reg[31:0] ADDIS =   {iformat, AddisCode, q2, q1, Immediate10};
reg[31:0] LOAD =    {LoadCode,q4,q1,Immediate30};
reg[31:0] LOADS =   {LoadSCode,q1,q2,Immediate10};
reg[31:0] STORE =   {StoreCode,q2,q3,Immediate20};
reg[31:0] STORES =  {StoreSCode,q3,q4,Immediate10};
reg[31:0] JREG =    {JregCode,q4,q1,Immediate20};
reg[31:0] BEZ =     {BezCode,q1,q2,Immediate10};
reg[31:0] BNEZ =    {BNezCode,q2,q3,Immediate20};
reg[31:0] JAL =     {JALCode,q3,q4,Immediate10};
reg[31:0] JMP =     {JmpCode,ImmediateGross20};

 // Module instance
 Instruktionsdekodierer idec (
  .Instruktion(Instruktion),
  .QuellRegister1(QuellReg1),
  .QuellRegister2(QuellReg2),
  .ZielRegister(ZielReg1),
  .IDaten(IDaten),
  .ImmediateAktiv(ImmediateAktiv),
  .FunktionsCode(FunktionsCode),
  .LoadBefehl(LoadBefehl),
  .StoreBefehl(StoreBefehl),
  .RelativerSprung(RelativerSprung),
  .UnbedingterSprungBefehl(UnbedingterSprungBefehl),
  .BedingterSprungBefehl(BedingterSprung),
  .AbsoluterSprung(AbsoluterSprung),
  .Reset(Reset),
  .DekodierSignal(DekodierSignal),
  .JALBefehl(JALBefehl),
  .Sprungbedingung(Sprungbedingung)
 );
 
 
 always #1000 Clock = ~Clock;
 initial begin
  $dumpvars(0, main_tb);
  
// TODO: initialize the registers here
  // e.g. value = 1'b1;
  // e.g. #2 value = 1'b0;

    //Clock
    Clock = 0;
    #1000
    DekodierSignal = 1'b1;
    Instruktion = 32'b0;
    Reset = 1'b1;
    #2000
    Reset = 1'b0;
    Instruktion = ADD;
    #2000
    $display("ADD");
    `assert(QuellReg1, iq3);
    `assert(QuellReg2, iq1);
    `assert(ZielReg1, iq2);
    `assert(IDaten, 32'b0);
    `assert(ImmediateAktiv, 1'b0);
    `assert(FunktionsCode, ADDFunktion);
    `assert(JALBefehl, 1'b0);
    `assert(RelativerSprung, 1'b0);
    `assert(LoadBefehl, 1'b0);
    `assert(StoreBefehl, 1'b0);
    `assert(UnbedingterSprungBefehl, 1'b0);
    `assert(BedingterSprung, 1'b0);
    `assert(AbsoluterSprung, 1'b0);
    `assert(Sprungbedingung, 1'b0);

    Instruktion = MUL;
    #2000
    $display("MUL");
    `assert(QuellReg1, iq2);
    `assert(QuellReg2, iq3);
    `assert(ZielReg1, iq1);
    `assert(IDaten, 32'b0);
    `assert(ImmediateAktiv, 0);
    `assert(FunktionsCode, MULFunktion);
    `assert(JALBefehl, 0);
    `assert(RelativerSprung, 0);
    `assert(LoadBefehl, 0);
    `assert(StoreBefehl, 0);
    `assert(UnbedingterSprungBefehl, 0);
    `assert(BedingterSprung, 0);
    `assert(AbsoluterSprung, 0);
    `assert(Sprungbedingung, 0);

    Instruktion = CGE;
    #2000
    $display("CGE");
    `assert(QuellReg1, iq2);
    `assert(QuellReg2, iq1);
    `assert(ZielReg1, iq3);
    `assert(IDaten, 0);
    `assert(ImmediateAktiv, 0);
    `assert(FunktionsCode, CGEFunktion);
    `assert(JALBefehl, 0);
    `assert(RelativerSprung, 0);
    `assert(LoadBefehl, 0);
    `assert(StoreBefehl, 0);
    `assert(UnbedingterSprungBefehl, 0);
    `assert(BedingterSprung, 0);
    `assert(AbsoluterSprung, 0);
    `assert(Sprungbedingung, 0);

    Instruktion = MULS;
    #2000
    $display("MULS");
    `assert(QuellReg1, sq4);
    `assert(QuellReg2, sq2);
    `assert(ZielReg1, sq1);
    `assert(IDaten, 0);
    `assert(ImmediateAktiv, 0);
    `assert(FunktionsCode, MULSFunktion);
    `assert(JALBefehl, 0);
    `assert(RelativerSprung, 0);
    `assert(LoadBefehl, 0);
    `assert(StoreBefehl, 0);
    `assert(UnbedingterSprungBefehl, 0);
    `assert(BedingterSprung, 0);
    `assert(AbsoluterSprung, 0);
    `assert(Sprungbedingung, 0);

    Instruktion = CGES;
    #2000
    $display("CLS");
    `assert(QuellReg1, sq1);
    `assert(QuellReg2, sq2);
    `assert(ZielReg1, iq2);
    `assert(IDaten, 0);
    `assert(ImmediateAktiv, 0);
    `assert(FunktionsCode, CLSFunktion);
    `assert(JALBefehl, 0);
    `assert(RelativerSprung, 0);
    `assert(LoadBefehl, 0);
    `assert(StoreBefehl, 0);
    `assert(UnbedingterSprungBefehl, 0);
    `assert(BedingterSprung, 0);
    `assert(AbsoluterSprung, 0);
    `assert(Sprungbedingung, 0);

    Instruktion = MULI;
    #2000
    $display("MULI");
    `assert(QuellReg1, iq1);
    `assert(QuellReg2, 0);
    `assert(ZielReg1, iq3);
    `assert(IDaten, ImmediateGross20);
    `assert(ImmediateAktiv, 1);
    `assert(FunktionsCode, MULFunktion);
    `assert(JALBefehl, 0);
    `assert(RelativerSprung, 0);
    `assert(LoadBefehl, 0);
    `assert(StoreBefehl, 0);
    `assert(UnbedingterSprungBefehl, 0);
    `assert(BedingterSprung, 0);
    `assert(AbsoluterSprung, 0);
    `assert(Sprungbedingung, 0);

    Instruktion = SLLI;
    #2000
    $display("SLLI");
    `assert(QuellReg1, iq4);
    `assert(ZielReg1, iq2);
    `assert(IDaten, {16'b0,Immediate30});
    `assert(ImmediateAktiv, 1);
    `assert(FunktionsCode, {1'b0,SLLIFunktion});
    `assert(JALBefehl, 0);
    `assert(RelativerSprung, 0);
    `assert(LoadBefehl, 0);
    `assert(StoreBefehl, 0);
    `assert(UnbedingterSprungBefehl, 0);
    `assert(BedingterSprung, 0);
    `assert(AbsoluterSprung, 0);
    `assert(Sprungbedingung, 0);

    Instruktion = ADDIS;
    #2000
    $display("ADDIS");
    `assert(QuellReg1, iq1);
    `assert(QuellReg2, 0);
    `assert(ZielReg1, iq2);
    `assert(IDaten, Immediate10Shifted);
    `assert(ImmediateAktiv, 1);
    `assert(FunktionsCode, 0);
    `assert(JALBefehl, 0);
    `assert(RelativerSprung, 0);
    `assert(LoadBefehl, 0);
    `assert(StoreBefehl, 0);
    `assert(UnbedingterSprungBefehl, 0);
    `assert(BedingterSprung, 0);
    `assert(AbsoluterSprung, 0);
    `assert(Sprungbedingung, 0);

    Instruktion = LOAD;
    #2000
    $display("LOAD");
    `assert(QuellReg1, iq1);
    `assert(ZielReg1, iq4);
    `assert(IDaten, {16'b1111111111111111,Immediate30});
    `assert(ImmediateAktiv, 1);
    `assert(FunktionsCode, 0);
    `assert(JALBefehl, 0);
    `assert(RelativerSprung, 0);
    `assert(LoadBefehl, 1);
    `assert(StoreBefehl, 0);
    `assert(UnbedingterSprungBefehl, 0);
    `assert(BedingterSprung, 0);
    `assert(AbsoluterSprung, 0);
    `assert(Sprungbedingung, 0);

    Instruktion = LOADS;
    #2000
    $display("LOADS");
    `assert(QuellReg1, iq2);
    `assert(QuellReg2, 0);
    `assert(ZielReg1, sq1);
    `assert(IDaten, ImmediateGross10);
    `assert(ImmediateAktiv, 1);
    `assert(FunktionsCode, 0);
    `assert(JALBefehl, 0);
    `assert(RelativerSprung, 0);
    `assert(LoadBefehl, 1);
    `assert(StoreBefehl, 0);
    `assert(UnbedingterSprungBefehl, 0);
    `assert(BedingterSprung, 0);
    `assert(AbsoluterSprung, 0);
    `assert(Sprungbedingung, 0);

    Instruktion = STORE;
    #2000
    $display("STORE");
    `assert(QuellReg1, iq3);
    `assert(QuellReg2, iq2);
    `assert(ZielReg1, iq2); //vlt 0
    `assert(IDaten, ImmediateGross20);
    `assert(ImmediateAktiv, 1);
    `assert(FunktionsCode, 0);
    `assert(JALBefehl, 0);
    `assert(RelativerSprung, 0);
    `assert(LoadBefehl, 0);
    `assert(StoreBefehl, 1);
    `assert(UnbedingterSprungBefehl, 0);
    `assert(BedingterSprung, 0);
    `assert(AbsoluterSprung, 0);
    `assert(Sprungbedingung, 0);

    Instruktion = STORES;
    #2000
    $display("STORES");
    `assert(QuellReg1, iq4);
    `assert(QuellReg2, sq3);
    `assert(ZielReg1, sq3); //vlt 0
    `assert(IDaten, ImmediateGross10);
    `assert(ImmediateAktiv, 1);
    `assert(FunktionsCode, 0);
    `assert(JALBefehl, 0);
    `assert(RelativerSprung, 0);
    `assert(LoadBefehl, 0);
    `assert(StoreBefehl, 1);
    `assert(UnbedingterSprungBefehl, 0);
    `assert(BedingterSprung, 0);
    `assert(AbsoluterSprung, 0);
    `assert(Sprungbedingung, 0);

    Instruktion = JREG;
    #2000
    $display("JREG");
    `assert(QuellReg1, iq1);
    `assert(QuellReg2, 0); //egal
    `assert(ZielReg1, iq4); //egal
    `assert(IDaten, ImmediateGross20);
    `assert(ImmediateAktiv, 1);
    `assert(FunktionsCode, 0);
    `assert(JALBefehl, 0);
    `assert(RelativerSprung, 0);
    `assert(LoadBefehl, 0);
    `assert(StoreBefehl, 0);
    `assert(UnbedingterSprungBefehl, 1);
    `assert(BedingterSprung, 0);
    `assert(AbsoluterSprung, 1);
    `assert(Sprungbedingung, 0);

    Instruktion = BEZ;
    #2000
    $display("BEZ");
    `assert(QuellReg1, iq2);
    `assert(QuellReg2, 0); //egal
    `assert(ZielReg1, iq1); //egal
    `assert(IDaten, ImmediateGross10);
    `assert(ImmediateAktiv, 1);
    `assert(FunktionsCode, 0);
    `assert(JALBefehl, 0);
    `assert(RelativerSprung, 1);
    `assert(LoadBefehl, 0);
    `assert(StoreBefehl, 0);
    `assert(UnbedingterSprungBefehl, 0);
    `assert(BedingterSprung, 1);
    `assert(AbsoluterSprung, 0);
    `assert(Sprungbedingung, 1);

    Instruktion = BNEZ;
    #2000
    $display("BNEZ");
    `assert(QuellReg1, iq3);
    `assert(QuellReg2, 0); //egal
    `assert(ZielReg1, iq2); //egal
    `assert(IDaten, ImmediateGross20);
    `assert(ImmediateAktiv, 1);
    `assert(FunktionsCode, 0);
    `assert(JALBefehl, 0);
    `assert(RelativerSprung, 1);
    `assert(LoadBefehl, 0);
    `assert(StoreBefehl, 0);
    `assert(UnbedingterSprungBefehl, 0);
    `assert(BedingterSprung, 1);
    `assert(AbsoluterSprung, 0);
    `assert(Sprungbedingung, 0);

    Instruktion = JAL;
    #2000
    $display("JAL");
    `assert(QuellReg1, iq4); //egal
    `assert(QuellReg2, 0); //egal
    `assert(ZielReg1, iq3); 
    `assert(IDaten, ImmediateGross10);
    `assert(ImmediateAktiv, 1);
    `assert(FunktionsCode, 0);
    `assert(JALBefehl, 1);
    `assert(RelativerSprung, 1);
    `assert(LoadBefehl, 0);
    `assert(StoreBefehl, 0);
    `assert(UnbedingterSprungBefehl, 1);
    `assert(BedingterSprung, 0);
    `assert(AbsoluterSprung, 0);
    `assert(Sprungbedingung, 0);

    Instruktion = JMP;
    #2000
    $display("JMP");
    `assert(QuellReg1, 0); //egal
    `assert(QuellReg2, 0); //egal
    `assert(ZielReg1, 0);  //egal
    `assert(IDaten, ImmediateGross20);
    `assert(ImmediateAktiv, 1);
    `assert(FunktionsCode, 0);
    `assert(JALBefehl, 0);
    `assert(RelativerSprung, 1);
    `assert(LoadBefehl, 0);
    `assert(StoreBefehl, 0);
    `assert(UnbedingterSprungBefehl, 1);
    `assert(BedingterSprung, 0);
    `assert(AbsoluterSprung, 0);
    `assert(Sprungbedingung, 0);
      
   #1000


    #(DURATION) $display("End of simulation");
  $finish;
 end
 initial
  begin
    #10
    forever
      #1000 DekodierSignal = !DekodierSignal;
  end

endmodule

