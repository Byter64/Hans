// Code generated by Icestudio 0.10
// Sat, 18 Mar 2023 19:03:03 GMT

// Testbench template
`include "../Steuerung.v"
`default_nettype none
`define DUMPSTR(x) `"x.vcd`"
`timescale 10 ns / 1 ns

module main_tb
;
 
 // Simulation time: 100ns (10 * 10ns)
 parameter CLOCKSTEP = 5;
 parameter TIMESTEP = CLOCKSTEP * 2;
 parameter DECODETIME = 2;
 parameter REGISTERWRITETIME = 1;
 parameter PCWRITETIME = 1;

 // Input/Output
   reg BefehlGeladen;
   reg LoadBefehl;
   reg StoreBefehl;
   reg JALBefehl;
   reg UnbedingterSprungBefehl; //
   reg BedingterSprungBefehl; //
   reg Bedingung; //
   reg AluFertig;
   reg DatenGeladen;
   reg DatenGespeichert;
   reg Reset;
   reg Clock;

   wire LoadBefehlSignal;
   wire DekodierSignal;
   wire ALUStartSignal;
   wire RegisterSchreibSignal;
   wire LoadDatenSignal;
   wire StoreDatenSignal;
   wire PCSignal;
   wire PCSprungSignal;

 
 // Module instance
 Steuerung strg (
   .BefehlGeladen(BefehlGeladen),
   .LoadBefehl(LoadBefehl),
   .StoreBefehl(StoreBefehl),
   .JALBefehl(JALBefehl),
   .UnbedingterSprungBefehl(UnbedingterSprungBefehl), //
   .BedingterSprungBefehl(BedingterSprungBefehl), //
   .Bedingung(Bedingung), //
   .AluFertig(AluFertig),
   .DatenGeladen(DatenGeladen),
   .DatenGespeichert(DatenGespeichert),
   .Reset(Reset),
   .Clock(Clock),

   .LoadBefehlSignal(LoadBefehlSignal),
   .DekodierSignal(DekodierSignal),
   .ALUStartSignal(ALUStartSignal),
   .RegisterSchreibSignal(RegisterSchreibSignal),
   .LoadDatenSignal(LoadDatenSignal),
   .StoreDatenSignal(StoreDatenSignal),
   .PCSignal(PCSignal),
   .PCSprungSignal(PCSprungSignal)
 );
 
 always begin
    #(CLOCKSTEP)
    Clock = ~Clock;
 end

 initial begin
  $dumpvars(0, main_tb);
 
  // TODO: initialize the registers here
  // e.g. value = 1;
  // e.g. #2 value = 0;
  
  //Steuerung wird initialisiert
  Reset = 1;
  #(TIMESTEP)
  Reset = 0;
  Clock = 0;
  #1

  #(TIMESTEP)
  //Steuerung in FETCH
  assert(LoadBefehlSignal, 1, `__LINE__);
  #6 //Wir simulieren einen geladenen Befehl nach 7 Zeiteinheiten
  BefehlGeladen = 1;
  #(TIMESTEP - 6)
  //Steuerung in DECODE
  assert(LoadBefehlSignal, 0, `__LINE__);
  assert(DekodierSignal, 1, `__LINE__);
  BefehlGeladen = 0;
  
  LoadBefehl = 0;
  StoreBefehl = 0;
  JALBefehl = 1;
  //Bedingungstestung
  UnbedingterSprungBefehl = 0;
  BedingterSprungBefehl = 0;
  Bedingung = 0;
  #1 assert(PCSprungSignal, 0, `__LINE__);
  BedingterSprungBefehl = 1;
  #1 assert(PCSprungSignal, 0, `__LINE__);
  Bedingung = 1;
  #1 assert(PCSprungSignal, 1, `__LINE__);
  BedingterSprungBefehl = 0;
  Bedingung = 0;
  UnbedingterSprungBefehl = 1;
  #1 assert(PCSprungSignal, 1, `__LINE__);
  #(DECODETIME * TIMESTEP - 4)
  assert(DekodierSignal, 0, `__LINE__);

  //Steuerung in ALU
  assert(ALUStartSignal, 1, `__LINE__); //ALU rechnet
  assert(RegisterSchreibSignal, 1, `__LINE__); //JALBefehl schreibt jetzt
  #(TIMESTEP + 6)
  AluFertig = 1;
  #(TIMESTEP - 6)
  assert(ALUStartSignal, 0, `__LINE__);
  assert(RegisterSchreibSignal, 0, `__LINE__);
  AluFertig = 0;
  
  assert(PCSignal, 1, `__LINE__);
  #(PCWRITETIME * TIMESTEP)
  assert(PCSignal, 0, `__LINE__);

  //Hier startet Test LoadBefehl
  assert(LoadBefehlSignal, 1, `__LINE__);
  #6
  BefehlGeladen = 1;
  #(TIMESTEP - 6)
  assert(LoadBefehlSignal, 0, `__LINE__);
  assert(DekodierSignal, 1, `__LINE__);
  BefehlGeladen = 0;
  
  LoadBefehl = 1;
  StoreBefehl = 0;
  JALBefehl = 0;
  UnbedingterSprungBefehl = 0;
  BedingterSprungBefehl = 0;
  Bedingung = 0;
  #(DECODETIME * TIMESTEP)
  assert(DekodierSignal, 0, `__LINE__);

  assert(ALUStartSignal, 1, `__LINE__);
  assert(RegisterSchreibSignal, 0, `__LINE__);
  #(TIMESTEP + 6)
  AluFertig = 1;
  #(TIMESTEP - 6)
  assert(ALUStartSignal, 0, `__LINE__);
  AluFertig = 0;

  assert(PCSignal, 1, `__LINE__);
  assert(LoadDatenSignal, 1, `__LINE__);
  #(TIMESTEP + 6)
  DatenGeladen = 1;
  #(TIMESTEP - 6)
  assert(LoadDatenSignal, 0, `__LINE__);
  assert(PCSignal, 1, `__LINE__);
  assert(RegisterSchreibSignal, 1, `__LINE__);
  DatenGeladen = 0;
  #(REGISTERWRITETIME * TIMESTEP)
  assert(PCSignal, 0, `__LINE__);
  assert(RegisterSchreibSignal, 0, `__LINE__);

  //Hier startet Test StoreBefehl
  assert(LoadBefehlSignal, 1, `__LINE__);
  #6
  BefehlGeladen = 1;
  #(TIMESTEP - 6)
  assert(LoadBefehlSignal, 0, `__LINE__);
  assert(DekodierSignal, 1, `__LINE__);
  BefehlGeladen = 0;
  
  LoadBefehl = 0;
  StoreBefehl = 1;
  JALBefehl = 0;
  UnbedingterSprungBefehl = 0;
  BedingterSprungBefehl = 0;
  Bedingung = 0;
  #(DECODETIME * TIMESTEP)
  assert(DekodierSignal, 0, `__LINE__);
  
  assert(ALUStartSignal, 1, `__LINE__);
  assert(RegisterSchreibSignal, 0, `__LINE__);
  #(TIMESTEP + 6)
  AluFertig = 1;
  #(TIMESTEP - 6)
  assert(ALUStartSignal, 0, `__LINE__);
  AluFertig = 0;
  
  assert(PCSignal, 1, `__LINE__);
  assert(StoreDatenSignal, 1, `__LINE__);
  #(TIMESTEP * 2 + 6)
  DatenGespeichert = 1;
  #(TIMESTEP - 6)
  assert(PCSignal, 0, `__LINE__);
  assert(StoreDatenSignal, 0, `__LINE__);
  assert(RegisterSchreibSignal, 0, `__LINE__);
  DatenGespeichert = 0;

  //Hier startet Test Standard
  assert(LoadBefehlSignal, 1, `__LINE__);
  #6
  BefehlGeladen = 1;
  #(TIMESTEP - 6)
  assert(LoadBefehlSignal, 0, `__LINE__);
  assert(DekodierSignal, 1, `__LINE__);
  BefehlGeladen = 0;
  
  LoadBefehl = 0;
  StoreBefehl = 0;
  JALBefehl = 0;
  UnbedingterSprungBefehl = 0;
  BedingterSprungBefehl = 0;
  Bedingung = 0;
  #(DECODETIME * TIMESTEP)
  assert(DekodierSignal, 0, `__LINE__);

  assert(ALUStartSignal, 1, `__LINE__);
  assert(RegisterSchreibSignal, 0, `__LINE__);
  #(15 * TIMESTEP + 6)
  AluFertig = 1;
  #(TIMESTEP - 6)
  assert(ALUStartSignal, 0, `__LINE__);
  AluFertig = 0;

  assert(RegisterSchreibSignal, 1, `__LINE__);
  assert(PCSignal, 1, `__LINE__);
  #(REGISTERWRITETIME * TIMESTEP)

  assert(PCSignal, 0, `__LINE__);
  assert(RegisterSchreibSignal, 0, `__LINE__);
  assert(LoadBefehlSignal, 1, `__LINE__);

  #(TIMESTEP) $display("End of simulation");
  $finish;
 end
 
 task assert;
    input assertValue;
    input shouldValue;
    input [7:0] line;
    begin
      if (assertValue != shouldValue) begin
        $display("line %d: Value = %b, should be %b", line, assertValue, shouldValue);
        $finish;
      end
    end
 endtask

endmodule
