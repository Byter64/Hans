// Code generated by Icestudio 0.10
// Sat, 18 Mar 2023 19:01:17 GMT

// Testbench template
`include "../Instruktionsdekodierer.v"
`default_nettype none
`define DUMPSTR(x) `"x.vcd`"
`timescale 10 ns / 1 ns
`define assert(signal, value) \
        if (signal !== value) begin \
            $display("ASSERTION FAILED in %m: signal != value"); \
            $finish; \
        end
module main_tb
;
 
 // Simulation time: 100ns (10 * 10ns)
 parameter DURATION = 10;
 
// Input/Output
 reg [31:0] Instruktion;
 reg DekodierSignal;
 reg Reset;
 wire [5:0] QuellReg1;
 wire [5:0] QuellReg2;
 wire [5:0] ZielReg1;
 wire [25:0] IDaten;
 wire KleinerImmediateAktiv;
 wire GrosserImmediateAktiv;
 wire [5:0] FunktionsCode;
 wire JALBefehl;
 wire RelativerSprung;
 wire FloatBefehl;
 wire LoadBefehl;
 wire StoreBefehl;
 wire UnbedingterSprungBefehl;
 wire BedingterSprung;
 wire AbsoluterSprung;

//Instruktion
reg[31:0] NUL =   32'b00000000000000000000000000000000;
reg[31:0] ADD =   32'b00000010101001001010100000000000;
reg[31:0] MUL =   32'b00000001010110110101000000000010;
reg[31:0] DIV =   32'b00000011000110001100000000000011;
reg[31:0] SQRT =  32'b00000000111001110000000000000101;
reg[31:0] SL =    32'b00000001101100100000000000000111;
reg[31:0] CNE =   32'b00000001100100111001000000010001;
reg[31:0] CL =    32'b00000001011101101101000000010100;
reg[31:0] AND =   32'b00000010100111111111000000011001;
reg[31:0] ADDS =  32'b00000000010010111000000000100000;
reg[31:0] MULS =  32'b00000001100101010101100000100010;
reg[31:0] DIVS =  32'b00000010011010101010100000100011;
reg[31:0] SQRTS = 32'b00000011000101010000000000100101;
reg[31:0] ADDI =  32'b10000001110100010000000000000001;
reg[31:0] MODI =  32'b10010010100111000000000000000010;
reg[31:0] SLCI =  32'b10100000100001110000000000000100;
reg[31:0] STORE = 32'b10110011001010110000000000000000;
reg[31:0] JREG =  32'b10110100000111000000000000000000;
reg[31:0] BEZ =   32'b10111000000110100000000000000000;
reg[31:0] JAL =   32'b10111111000000000000000000000001;
reg[31:0] LOAD =  32'b10101011100001110000000000000000;
reg[31:0] LOADS = 32'b10101100011110000000000000000000;
reg[31:0] JMP =   32'b01000000000000000000000000000010;

 // Module instance
 Instruktionsdekodierer idec (
  .Instruktion(Instruktion),
  .QuellRegister1(QuellReg1),
  .QuellRegister2(QuellReg2),
  .ZielRegister(ZielReg1),
  .IDaten(IDaten),
  .KleinerImmediateAktiv(KleinerImmediateAktiv),
  .FunktionsCode(FunktionsCode),
  .FloatBefehl(FloatBefehl),
  .LoadBefehl(LoadBefehl),
  .StoreBefehl(StoreBefehl),
  .RelativerSprung(RelativerSprung),
  .UnbedingterSprungBefehl(UnbedingterSprungBefehl),
  .BedingterSprungBefehl(BedingterSprung),
  .AbsoluterSprung(AbsoluterSprung),
  .Reset(Reset),
  .DekodierSignal(DekodierSignal),
  .GrosserImmediateAktiv(GrosserImmediateAktiv),
  .JALBefehl(JALBefehl)
 );
 
 initial begin
  $dumpvars(0, main_tb);
  
// TODO: initialize the registers here
  // e.g. value = 1'b1;
  // e.g. #2 value = 1'b0;
    #1000
    DekodierSignal = 1'b1;
    Instruktion = NUL;
    Reset = 1'b1;
    #2000
    $display("I");
    $display("Reset");
    $display("I"); 

    assertSignal(QuellReg1,6'b000000,QuellReg2,6'b000000,ZielReg1,6'b000000,IDaten,26'b00000000000000000000000000,KleinerImmediateAktiv,1'b0,GrosserImmediateAktiv,1'b0,FunktionsCode,6'b0,JALBefehl,1'b0,RelativerSprung,1'b0,FloatBefehl,1'b0,LoadBefehl,1'b0,StoreBefehl,1'b0,UnbedingterSprungBefehl,1'b0,BedingterSprung,1'b0,AbsoluterSprung,1'b0);

    Instruktion = NUL;
    Reset = 1'b0;
    #2000
    $display("I");
    $display("NUL");  
    $display("I");
    assertSignal(QuellReg1,6'b000000,QuellReg2,6'b000000,ZielReg1,6'b000000,IDaten,26'b00000000000000000000000000,KleinerImmediateAktiv,1'b0,GrosserImmediateAktiv,1'b0,FunktionsCode,6'b0,JALBefehl,1'b0,RelativerSprung,1'b0,FloatBefehl,1'b0,LoadBefehl,1'b0,StoreBefehl,1'b0,UnbedingterSprungBefehl,1'b0,BedingterSprung,1'b0,AbsoluterSprung,1'b0);

    Instruktion = ADD;
    #2000
    $display("I");
    $display("ADD");  
    $display("I");
    assertSignal(QuellReg1,6'b000100,QuellReg2,6'b010101,ZielReg1,6'b010101,IDaten,26'b00000000000000000000000000,KleinerImmediateAktiv,1'b0,GrosserImmediateAktiv,1'b0,FunktionsCode,6'b0,JALBefehl,1'b0,RelativerSprung,1'b0,FloatBefehl,1'b0,LoadBefehl,1'b0,StoreBefehl,1'b0,UnbedingterSprungBefehl,1'b0,BedingterSprung,1'b0,AbsoluterSprung,1'b0);

    Instruktion = MUL;
    #2000
    $display("I");
    $display("MUL");  
    $display("I");
    assertSignal(QuellReg1,6'b011011,QuellReg2,6'b001010,ZielReg1,6'b001010,IDaten,26'b00000000000000000000000000,KleinerImmediateAktiv,1'b0,GrosserImmediateAktiv,1'b0,FunktionsCode,6'b000010,JALBefehl,1'b0,RelativerSprung,1'b0,FloatBefehl,1'b0,LoadBefehl,1'b0,StoreBefehl,1'b0,UnbedingterSprungBefehl,1'b0,BedingterSprung,1'b0,AbsoluterSprung,1'b0);

    Instruktion = DIV;
    #2000
    $display("I");
    $display("DIV");  
    $display("I");
    assertSignal(QuellReg1,6'b011000,QuellReg2,6'b011000,ZielReg1,6'b011000,IDaten,26'b00000000000000000000000000,KleinerImmediateAktiv,1'b0,GrosserImmediateAktiv,1'b0,FunktionsCode,6'b000011,JALBefehl,1'b0,RelativerSprung,1'b0,FloatBefehl,1'b0,LoadBefehl,1'b0,StoreBefehl,1'b0,UnbedingterSprungBefehl,1'b0,BedingterSprung,1'b0,AbsoluterSprung,1'b0);
    
    Instruktion = SQRT;
    #2000
    $display("I");
    $display("SQRT"); 
    $display("I"); 
    assertSignal(QuellReg1,6'b000111,QuellReg2,6'b000000,ZielReg1,6'b000111,IDaten,26'b00000000000000000000000000,KleinerImmediateAktiv,1'b0,GrosserImmediateAktiv,1'b0,FunktionsCode,6'b000101,JALBefehl,1'b0,RelativerSprung,1'b0,FloatBefehl,1'b0,LoadBefehl,1'b0,StoreBefehl,1'b0,UnbedingterSprungBefehl,1'b0,BedingterSprung,1'b0,AbsoluterSprung,1'b0);

    Instruktion = SL;
    #2000
    $display("I");
    $display("SL ");  
    $display("I");
    assertSignal(QuellReg1,6'b010010,QuellReg2,6'b000000,ZielReg1,6'b001101,IDaten,26'b00000000000000000000000000,KleinerImmediateAktiv,1'b0,GrosserImmediateAktiv,1'b0,FunktionsCode,6'b000111,JALBefehl,1'b0,RelativerSprung,1'b0,FloatBefehl,1'b0,LoadBefehl,1'b0,StoreBefehl,1'b0,UnbedingterSprungBefehl,1'b0,BedingterSprung,1'b0,AbsoluterSprung,1'b0);

    Instruktion = CNE;
    #2000
    $display("I");
    $display("CNE");
    $display("I");  
    assertSignal(QuellReg1,6'b010011,QuellReg2,6'b010010,ZielReg1,6'b001100,IDaten,26'b00000000000000000000000000,KleinerImmediateAktiv,1'b0,GrosserImmediateAktiv,1'b0,FunktionsCode,6'b010001,JALBefehl,1'b0,RelativerSprung,1'b0,FloatBefehl,1'b0,LoadBefehl,1'b0,StoreBefehl,1'b0,UnbedingterSprungBefehl,1'b0,BedingterSprung,1'b0,AbsoluterSprung,1'b0);

    Instruktion = CL;
    #2000
    $display("I");
    $display("CL");  
    $display("I");
    assertSignal(QuellReg1,6'b010110,QuellReg2,6'b011010,ZielReg1,6'b001011,IDaten,26'b00000000000000000000000000,KleinerImmediateAktiv,1'b0,GrosserImmediateAktiv,1'b0,FunktionsCode,6'b010100,JALBefehl,1'b0,RelativerSprung,1'b0,FloatBefehl,1'b0,LoadBefehl,1'b0,StoreBefehl,1'b0,UnbedingterSprungBefehl,1'b0,BedingterSprung,1'b0,AbsoluterSprung,1'b0);

    Instruktion = AND;
    #2000
    $display("I");
    $display("AND");  
    $display("I");
    assertSignal(QuellReg1,6'b011111,QuellReg2,6'b011110,ZielReg1,6'b010100,IDaten,26'b00000000000000000000000000,KleinerImmediateAktiv,1'b0,GrosserImmediateAktiv,1'b0,FunktionsCode,6'b011001,JALBefehl,1'b0,RelativerSprung,1'b0,FloatBefehl,1'b0,LoadBefehl,1'b0,StoreBefehl,1'b0,UnbedingterSprungBefehl,1'b0,BedingterSprung,1'b0,AbsoluterSprung,1'b0);

    Instruktion = ADDS;
    #2000
    $display("I");
    $display("ADD.S");  
    $display("I");
    assertSignal(QuellReg1,6'b101011,QuellReg2,6'b110000,ZielReg1,6'b100010,IDaten,26'b00000000000000000000000000,KleinerImmediateAktiv,1'b0,GrosserImmediateAktiv,1'b0,FunktionsCode,6'b100000,JALBefehl,1'b0,RelativerSprung,1'b0,FloatBefehl,1'b1,LoadBefehl,1'b0,StoreBefehl,1'b0,UnbedingterSprungBefehl,1'b0,BedingterSprung,1'b0,AbsoluterSprung,1'b0);

    Instruktion = MULS;
    #2000
    $display("I");
    $display("MUL.S");  
    $display("I");
    assertSignal(QuellReg1,6'b110101,QuellReg2,6'b101011,ZielReg1,6'b101100,IDaten,26'b00000000000000000000000000,KleinerImmediateAktiv,1'b0,GrosserImmediateAktiv,1'b0,FunktionsCode,6'b100010,JALBefehl,1'b0,RelativerSprung,1'b0,FloatBefehl,1'b1,LoadBefehl,1'b0,StoreBefehl,1'b0,UnbedingterSprungBefehl,1'b0,BedingterSprung,1'b0,AbsoluterSprung,1'b0);

    Instruktion = DIVS;
    #2000
    $display("I");
    $display("DIV.S"); 
    $display("I"); 
    assertSignal(QuellReg1,6'b101010,QuellReg2,6'b110101,ZielReg1,6'b110011,IDaten,26'b00000000000000000000000000,KleinerImmediateAktiv,1'b0,GrosserImmediateAktiv,1'b0,FunktionsCode,6'b100011,JALBefehl,1'b0,RelativerSprung,1'b0,FloatBefehl,1'b1,LoadBefehl,1'b0,StoreBefehl,1'b0,UnbedingterSprungBefehl,1'b0,BedingterSprung,1'b0,AbsoluterSprung,1'b0);

    Instruktion = SQRTS;
    #2000
    $display("I");
    $display("SQRT.S");  
    $display("I");
    assertSignal(QuellReg1,6'b110101,QuellReg2,6'b100000,ZielReg1,6'b111000,IDaten,26'b00000000000000000000000000,KleinerImmediateAktiv,1'b0,GrosserImmediateAktiv,1'b0,FunktionsCode,6'b100101,JALBefehl,1'b0,RelativerSprung,1'b0,FloatBefehl,1'b1,LoadBefehl,1'b0,StoreBefehl,1'b0,UnbedingterSprungBefehl,1'b0,BedingterSprung,1'b0,AbsoluterSprung,1'b0);

    Instruktion = ADDI;
    #2000
    $display("I");
    $display("ADDI");  
    $display("I");
    assertSignal(QuellReg1,6'b010001,QuellReg2,6'b000000,ZielReg1,6'b001110,IDaten,26'b00000000000000000000000001,KleinerImmediateAktiv,1'b1,GrosserImmediateAktiv,1'b0,FunktionsCode,6'b0,JALBefehl,1'b0,RelativerSprung,1'b0,FloatBefehl,1'b0,LoadBefehl,1'b0,StoreBefehl,1'b0,UnbedingterSprungBefehl,1'b0,BedingterSprung,1'b0,AbsoluterSprung,1'b0);

    Instruktion = MODI;
    #2000
    $display("I");
    $display("MODI");  
    $display("I");
    assertSignal(QuellReg1,6'b011100,QuellReg2,6'b000000,ZielReg1,6'b010100,IDaten,26'b00000000000000000000000010,KleinerImmediateAktiv,1'b1,GrosserImmediateAktiv,1'b0,FunktionsCode,6'b000100,JALBefehl,1'b0,RelativerSprung,1'b0,FloatBefehl,1'b0,LoadBefehl,1'b0,StoreBefehl,1'b0,UnbedingterSprungBefehl,1'b0,BedingterSprung,1'b0,AbsoluterSprung,1'b0);

    Instruktion = SLCI;
    #2000
    $display("I");
    $display("SLCI");
    $display("I");  
    assertSignal(QuellReg1,6'b000111,QuellReg2,6'b000000,ZielReg1,6'b000100,IDaten,26'b00000000000000000000000100,KleinerImmediateAktiv,1'b1,GrosserImmediateAktiv,1'b0,FunktionsCode,6'b001000,JALBefehl,1'b0,RelativerSprung,1'b0,FloatBefehl,1'b0,LoadBefehl,1'b0,StoreBefehl,1'b0,UnbedingterSprungBefehl,1'b0,BedingterSprung,1'b0,AbsoluterSprung,1'b0);

    Instruktion = STORE;
    #2000
    $display("I");
    $display("STORE");
    $display("ZielReg kann ignoriert werden, da es intern nicht gebraucht wird bei Store"); 
    $display("I");
    assertSignal(QuellReg1,6'b001011,QuellReg2,6'b011001,ZielReg1,6'b000000,IDaten,26'b00000000000000000000000000,KleinerImmediateAktiv,1'b1,GrosserImmediateAktiv,1'b0,FunktionsCode,6'b0,JALBefehl,1'b0,RelativerSprung,1'b0,FloatBefehl,1'b0,LoadBefehl,1'b0,StoreBefehl,1'b1,UnbedingterSprungBefehl,1'b0,BedingterSprung,1'b0,AbsoluterSprung,1'b0);

    Instruktion = JREG;
    #2000
    $display("I");
    $display("JREG"); 
    $display("I"); 
    assertSignal(QuellReg1,6'b011100,QuellReg2,6'b000000,ZielReg1,6'b000000,IDaten,26'b00000000000000000000000000,KleinerImmediateAktiv,1'b1,GrosserImmediateAktiv,1'b0,FunktionsCode,6'b0,JALBefehl,1'b0,RelativerSprung,1'b0,FloatBefehl,1'b0,LoadBefehl,1'b0,StoreBefehl,1'b0,UnbedingterSprungBefehl,1'b1,BedingterSprung,1'b0,AbsoluterSprung,1'b1);

    Instruktion = BEZ;
    #2000
    $display("I");
    $display("BEZ");  
    $display("I");
    assertSignal(QuellReg1,6'b011010,QuellReg2,6'b000000,ZielReg1,6'b000000,IDaten,26'b00000000000000000000000000,KleinerImmediateAktiv,1'b1,GrosserImmediateAktiv,1'b0,FunktionsCode,6'b0,JALBefehl,1'b0,RelativerSprung,1'b1,FloatBefehl,1'b0,LoadBefehl,1'b0,StoreBefehl,1'b0,UnbedingterSprungBefehl,1'b0,BedingterSprung,1'b1,AbsoluterSprung,1'b0);

    Instruktion = JAL;
    #2000
    $display("I");
    $display("JAL");  
    $display("I");
    assertSignal(QuellReg1,6'b000000,QuellReg2,6'b000000,ZielReg1,6'b011000,IDaten,26'b00000000000000000000000001,KleinerImmediateAktiv,1'b1,GrosserImmediateAktiv,1'b0,FunktionsCode,6'b0,JALBefehl,1'b1,RelativerSprung,1'b1,FloatBefehl,1'b0,LoadBefehl,1'b0,StoreBefehl,1'b0,UnbedingterSprungBefehl,1'b1,BedingterSprung,1'b0,AbsoluterSprung,1'b0);

    Instruktion = JMP;
    #2000
    $display("I");
    $display("JMP");  
    $display("I");
    assertSignal(QuellReg1,6'b000000,QuellReg2,6'b000000,ZielReg1,6'b000000,IDaten,26'b00000000000000000000000010,KleinerImmediateAktiv,1'b0,GrosserImmediateAktiv,1'b1,FunktionsCode,6'b0,JALBefehl,1'b0,RelativerSprung,1'b1,FloatBefehl,1'b0,LoadBefehl,1'b0,StoreBefehl,1'b0,UnbedingterSprungBefehl,1'b1,BedingterSprung,1'b0,AbsoluterSprung,1'b0);
    
    Instruktion = LOAD;
    #2000
    $display("I");
    $display("LOAD");
    $display("I");  
    assertSignal(QuellReg1,6'b000111,QuellReg2,6'b000000,ZielReg1,6'b011100,IDaten,26'b00000000000000000000000000,KleinerImmediateAktiv,1'b1,GrosserImmediateAktiv,1'b0,FunktionsCode,6'b0,JALBefehl,1'b0,RelativerSprung,1'b0,FloatBefehl,1'b0,LoadBefehl,1'b1,StoreBefehl,1'b0,UnbedingterSprungBefehl,1'b0,BedingterSprung,1'b0,AbsoluterSprung,1'b0);

    Instruktion = LOADS;
    #2000
    $display("I");
    $display("LOAD.S");
    $display("I");  
    assertSignal(QuellReg1,6'b011000,QuellReg2,6'b000000,ZielReg1,6'b100011,IDaten,26'b00000000000000000000000000,KleinerImmediateAktiv,1'b1,GrosserImmediateAktiv,1'b0,FunktionsCode,6'b0,JALBefehl,1'b0,RelativerSprung,1'b0,FloatBefehl,1'b1,LoadBefehl,1'b1,StoreBefehl,1'b0,UnbedingterSprungBefehl,1'b0,BedingterSprung,1'b0,AbsoluterSprung,1'b0);
   
   #1000
    $display("I");

    #(DURATION) $display("End of simulation");
  $finish;
 end
 initial
  begin
    #10
    forever
      #1000 DekodierSignal = !DekodierSignal;
  end
 task assertSignal;
  input  [5:0]assertQuellReg1;
  input  [5:0]shouldQuellReg1;
  input  [5:0] assertQuellReg2;
  input  [5:0] shouldQuellReg2;
  input  [5:0] assertZielReg1;
  input  [5:0] shouldZielReg1;
  input  [25:0] assertIDaten;
  input  [25:0] shouldIDaten;
  input  assertKleinerImmediateAktiv;
  input  shouldKleinerImmediateAktiv;
  input  assertGrosserImmediateAktiv;
  input  shouldGrosserImmediateAktiv;
  input  [5:0] assertFunktionsCode;
  input  [5:0] shouldFunktionsCode;
  input  assertJALBefehl;
  input  shouldJALBefehl;
  input  assertRelativerSprung;
  input  shouldRelativerSprung;
  input  assertFloatBefehl;
  input  shouldFloatBefehl;
  input  assertLoadBefehl;
  input  shouldLoadBefehl;
  input  assertStoreBefehl;
  input  shouldStoreBefehl;
  input  assertUnbedingterSprungBefehl;
  input  shouldUnbedingterSprungBefehl;
  input  assertBedingterSprung;
  input  shouldBedingterSprung;
  input  assertAbsoluterSprung;
  input  shouldAbsoluterSprung;
  begin

    if(assertQuellReg1 != shouldQuellReg1) begin 
      $display("QuellReg1 = %b, should be %b!",QuellReg1,shouldQuellReg1);
    end
    if(assertQuellReg2 != shouldQuellReg2) begin
      $display("QuellReg2 =  %b, should be  %b!",QuellReg2,shouldQuellReg2);
    end
    if(assertZielReg1 != shouldZielReg1) begin
      $display("ZielReg1 =  %b, should be  %b!",ZielReg1,shouldZielReg1);
    end
    if(assertIDaten != shouldIDaten) begin
      $display("IDaten =  %b, should be  %b!",IDaten,shouldIDaten);
    end
    if(assertKleinerImmediateAktiv != shouldKleinerImmediateAktiv) begin
      $display("KleinerImmediateAktiv =  %b, should be  %b!",KleinerImmediateAktiv,shouldKleinerImmediateAktiv);
    end
    if(assertGrosserImmediateAktiv != shouldGrosserImmediateAktiv) begin
      $display("GrosserImmediateAktiv =  %b, should be  %b!",GrosserImmediateAktiv,shouldGrosserImmediateAktiv);
    end
    if(assertFunktionsCode != shouldFunktionsCode) begin
      $display("FunktionsCode =  %b, should be  %b!",FunktionsCode,shouldFunktionsCode);
    end
    if(assertJALBefehl != shouldJALBefehl) begin
      $display("JALBefehl =  %b, should be  %b!",JALBefehl,shouldJALBefehl);
    end
    if(assertRelativerSprung != shouldRelativerSprung) begin
      $display("RelativerSprung =  %b, should be  %b!",RelativerSprung,shouldRelativerSprung);
    end
    if(assertFloatBefehl != shouldFloatBefehl) begin
      $display("FloatBefehl =  %b, should be  %b!",FloatBefehl,shouldFloatBefehl);
    end
    if(assertLoadBefehl != shouldLoadBefehl) begin
      $display("LoadBefehl =  %b, should be  %b!",LoadBefehl,shouldLoadBefehl);
    end
    if(assertStoreBefehl != shouldStoreBefehl) begin
      $display("QueStoreBefehlllReg1 =  %b, should be  %b!",StoreBefehl,shouldStoreBefehl);
    end
    if(assertUnbedingterSprungBefehl != shouldUnbedingterSprungBefehl) begin
      $display("UnbedingterSprungBefehl =  %b, should be  %b!",UnbedingterSprungBefehl,shouldUnbedingterSprungBefehl);
    end
    if(assertBedingterSprung != shouldBedingterSprung) begin
      $display("BedingterSprungBefehl =  %b, should be  %b!",BedingterSprung,shouldBedingterSprung);
    end
    if(assertAbsoluterSprung != shouldAbsoluterSprung) begin
      $display("AbsoluterSprung =  %b, should be  %b!",AbsoluterSprung,shouldAbsoluterSprung);
    end  

  end
 endtask

endmodule

