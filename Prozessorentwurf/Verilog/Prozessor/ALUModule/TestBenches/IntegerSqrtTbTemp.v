// Code generated by Icestudio 0.10
// Sat, 18 Mar 2023 19:01:30 GMT

// Testbench template
`include "../intsqrt.v"
`default_nettype none
`define DUMPSTR(x) `"x.vcd`"
`timescale 10 ns / 1 ns
`define assert(signal, value, message) \
        if (signal !== value) begin \
            $display("Falscher Wert in %m: ", message); \
        end

module main_tb;

 
 // Simulation time: 100ns (10 * 10ns)
 parameter DURATION = 10;
 
 // Input/Output
reg Clock, reset;
wire done;
reg [31:0] num_in;
reg [31:0] i;
wire [31:0] sq_root;
integer error,actual_result;  //this indicates the number of errors encountered during simulation.
parameter Clock_period = 10;    //Change clock period here. 
 
 
 // Module instance
 Intsqrt intsqrt (
    .Clock(Clock), 
    .reset(reset), 
    .num_in(num_in), 
    .done(done),
    .sq_root(sq_root)
 );
 
always #(Clock_period/2) Clock <= ~Clock;

initial
begin
    $dumpvars(0, main_tb);
    Clock = 1;
    error = 0;
    i=1;
    //First we apply reset input for one clock period.
    reset = 1;
    #Clock_period;
    reset = 0;
    //Test the design for all the combination of inputs.
    //Since we have (2^16)-1 inputs, we test all of them one by one. 
    while(i<=2**16) begin
        apply_input(i);
        i = i+1;    
    end
    #Clock_period;
    reset = 1;   //all inputs are tested. Apply reset
    num_in = 0;     //reset the 'num_in'
    $display("Errors:%d",error);
    $finish;  //Stop the simulation, as we have finished testing the design.
end

task apply_input;
    input [32:0] i;
begin
    num_in = i[31:0];  
    wait(~done);    //wait for the 'done' to finish its previous high state
    wait(done); //wait until 'done' output goes High.
    wait(~Clock);   //we sample the output at the falling edge of the clock.
    actual_result = $rtoi($floor($pow(i,0.5))); //Calculate the actual result.
    //if actual result and calculated result are different increment 'error' by 1.
    if(actual_result != sq_root) 
        error = error + 1; 
end
endtask
 
endmodule
