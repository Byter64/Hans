// Code generated by Icestudio 0.11.0-rc2

`default_nettype none

//---- Top entity
module main (
 input v68bd5f,
 input [31:0] va70d83,
 input [31:0] v6a71e7,
 input v91592c,
 output [31:0] vd36730
);
 wire [0:31] w0;
 wire w1;
 wire [0:31] w2;
 wire [0:31] w3;
 wire w4;
 assign vd36730 = w0;
 assign w1 = v68bd5f;
 assign w2 = va70d83;
 assign w3 = v6a71e7;
 assign w4 = v91592c;
 main_v318ac8 v318ac8 (
  .DatenRaus(w0),
  .SchreibenAn(w1),
  .DatenRein(w2),
  .Adresse(w3),
  .Clock(w4)
 );
endmodule


module main_v318ac8 #(
 parameter WORDS = 0
) (
 input SchreibenAn,
 input [31:0] DatenRein,
 input [31:0] Adresse,
 input Clock,
 output [31:0] DatenRaus
);
 reg[31:0] DatenRaus;
 reg[31:0] Daten[WORDS - 1:0];
 integer idx;
 
 initial begin
     //Daten[0] = 32'b10000000001000000000000000000001; //Addi R1, R0, #0
     //Daten[1] = 32'b10000011111000000000000000000001; //Addi R31, R0, #1
     //Daten[2] = 32'b10011011111111110000000000011111; //Sli R31, R31, #31
     
     //iDaten[3] = 32'b10110000001111110000000000000000; //Store R1, R31, #0
     //Daten[4] = 32'b10000000001000010000000000000001; //Addi R1, R1, #1
     //Daten[5] = 32'b01000011111111111111111111111101; //jmp -3
 
     //for (idx = 6; idx < WORDS; idx = idx + 1) 
     //Daten[idx] = 0;
 end
 
 always @(posedge Clock) begin
     if(SchreibenAn)
     Daten[Adresse] <= DatenRein;
     else
     DatenRaus <= Daten[Adresse];
 end
endmodule
